package com.dbflow5.query.property

import com.dbflow5.converter.TypeConverter
import com.dbflow5.database.DatabaseStatement

/**
 * Description: generated by tables.
 */
data class NullablePropertyStatementWrapper<T : Any?>(
    val statementBinder: (model: T, statement: DatabaseStatement, index: Int) -> Unit,
) {
    private val nullBinder: (statement: DatabaseStatement, index: Int) -> Unit =
        { statement, index -> statement.bindNull(index) }

    fun bind(model: T, statement: DatabaseStatement, startIndex: Int) {
        if (model != null) {
            statementBinder(model, statement, startIndex)
        } else {
            nullBinder(statement, startIndex)
        }
    }
}

/**
 * Description: generated by tables.
 */
data class PropertyStatementWrapper<T : Any>(
    val statementBinder: (model: T, statement: DatabaseStatement, index: Int) -> Unit,
) {
    fun bind(model: T, statement: DatabaseStatement, startIndex: Int) {
        statementBinder(model, statement, startIndex)
    }
}

data class TypeConvertedPropertyStatementWrapper<Model : Any, Data : Any>(
    val typeConverter: TypeConverter<Data, Model>,
    val statementBinder: (model: Data, statement: DatabaseStatement, index: Int) -> Unit,
) {
    fun bind(model: Model, statement: DatabaseStatement, startIndex: Int) {
        statementBinder(typeConverter.getDBValue(model), statement, startIndex)
    }
}

data class NullableTypeConvertedPropertyStatementWrapper<Model : Any, Data : Any>(
    val typeConverter: TypeConverter<Data, Model>,
    val statementBinder: (model: Data, statement: DatabaseStatement, index: Int) -> Unit,
) {
    private val nullBinder: (statement: DatabaseStatement, index: Int) -> Unit =
        { statement, index -> statement.bindNull(index) }

    fun bind(model: Model?, statement: DatabaseStatement, startIndex: Int) {
        if (model != null) {
            statementBinder(typeConverter.getDBValue(model), statement, startIndex)
        } else {
            nullBinder(statement, startIndex)
        }
    }
}
