package com.dbflow5.query.property

import com.dbflow5.adapter.ModelAdapter
import com.dbflow5.config.FlowManager
import com.dbflow5.converter.TypeConverter
import com.dbflow5.query.NameAlias
import com.dbflow5.query.Operator
import com.dbflow5.query.nameAlias
import kotlin.reflect.KClass

/**
 * Description: Provides convenience methods for [TypeConverter] when constructing queries.
 *
 * @author Andrew Grosner (fuzz)
 */

class TypeConvertedProperty<Data, Model> : Property<Model> {

    private var databaseProperty: TypeConvertedProperty<Model, Data>? = null

    private val convertToDB: Boolean
    private val getter: TypeConverterGetter

    override val table: Class<*>
        get() = super.table!!

    /**
     * Generated by the compiler, looks up the type converter based on [ModelAdapter] when needed.
     * This is so we can properly retrieve the type converter at any time.
     */
    fun interface TypeConverterGetter {

        fun getTypeConverter(modelClass: Class<*>): TypeConverter<*, *>
    }

    override val operator: Operator<Model>
        get() = Operator.op(nameAlias, table, getter, convertToDB)

    constructor(
        table: Class<*>, nameAlias: NameAlias,
        convertToDB: Boolean,
        getter: TypeConverterGetter
    ) : super(table, nameAlias) {
        this.convertToDB = convertToDB
        this.getter = getter
    }

    constructor(
        table: KClass<*>,
        columnName: String,
        convertToDB: Boolean = true,
        getter: TypeConverterGetter
    ) : this(table.java, columnName, convertToDB, getter)

    constructor(
        table: Class<*>, columnName: String,
        convertToDB: Boolean,
        getter: TypeConverterGetter
    ) : super(table, columnName.nameAlias) {
        this.convertToDB = convertToDB
        this.getter = getter
    }

    override fun withTable(): TypeConvertedProperty<Data, Model> {
        val nameAlias = this.nameAlias
            .newBuilder()
            .withTable(FlowManager.getTableName(table))
            .build()
        return TypeConvertedProperty(this.table, nameAlias, this.convertToDB, this.getter)
    }

    /**
     * @return A new [Property] that corresponds to the inverted type of the [TypeConvertedProperty].
     * Provides a convenience for supplying type converted methods within the DataClass of the [TypeConverter]
     */
    fun invertProperty(): Property<Data> = databaseProperty
        ?: TypeConvertedProperty<Model, Data>(
            table, nameAlias,
            !convertToDB
        ) { modelClass -> getter.getTypeConverter(modelClass) }.also { databaseProperty = it }

    override fun withTable(tableNameAlias: NameAlias): TypeConvertedProperty<Data, Model> {
        val nameAlias = this.nameAlias
            .newBuilder()
            .withTable(tableNameAlias.tableName)
            .build()
        return TypeConvertedProperty(this.table, nameAlias, this.convertToDB, this.getter)
    }
}
