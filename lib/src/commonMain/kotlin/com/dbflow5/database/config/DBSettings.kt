package com.dbflow5.database.config

import com.dbflow5.config.JournalMode
import com.dbflow5.database.DatabaseCallback
import com.dbflow5.database.OpenHelper
import com.dbflow5.database.OpenHelperCreator
import com.dbflow5.database.transaction.TransactionDispatcherFactory
import com.dbflow5.observing.notifications.DirectModelNotifier
import com.dbflow5.observing.notifications.ModelNotifierFactory
import com.dbflow5.transaction.TransactionDispatcher

expect class DBPlatformSettings {
    /**
     * Used for ability to use Write Ahead Logging
     */
    val isLowRamDevice: Boolean
}

/**
 * Autogenerated by the library to provide initialization.
 */
data class DBSettings(
    val name: String,
    val platformSettings: DBPlatformSettings, // this may go into platform specific extension
    val openHelperCreator: OpenHelperCreator = OpenHelperCreator(::OpenHelper),
    val transactionDispatcherFactory: TransactionDispatcherFactory =
        TransactionDispatcherFactory(::TransactionDispatcher),
    val databaseCallback: DatabaseCallback? = null,
    val modelNotifierFactory: ModelNotifierFactory = ModelNotifierFactory(::DirectModelNotifier),
    val inMemory: Boolean = false,
    val databaseExtensionName: String = DEFAULT_EXT,
    val journalMode: JournalMode = JournalMode.Automatic,
    val throwExceptionsOnCreate: Boolean = true,
) {

    init {
        if (!isValidDatabaseName(name)) {
            throw IllegalArgumentException(
                "Invalid database name $name found. Names must follow " +
                    "the \"[A-Za-z_\$]+[a-zA-Z0-9_\$]*\" pattern."
            )
        }
    }

    private companion object {
        const val DEFAULT_EXT = ".db"
    }
}

/**
 *
 * Checks if databaseName is valid. It will check if databaseName matches regex pattern
 * [A-Za-z_$]+[a-zA-Z0-9_$]
 * Examples:
 * database - valid
 * DbFlow1 - valid
 * database.db - invalid (contains a dot)
 * 1database - invalid (starts with a number)
 * @param databaseName database name to validate.
 * @return `true` if parameter is a valid database name, `false` otherwise.
 */
private fun isValidDatabaseName(databaseName: String): Boolean {
    val javaClassNamePattern = "[A-Za-z_$]+[a-zA-Z0-9_$]*".toRegex()
    return javaClassNamePattern.matches(databaseName)
}
