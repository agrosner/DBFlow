apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'kotlin-kapt'

android {

    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 25
    buildToolsVersion dbflow_build_tools_version

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    kapt project("${dbflow_project_prefix}dbflow-processor")
    compile project(':dbflow')
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile project("${dbflow_project_prefix}dbflow")
    compile project("${dbflow_project_prefix}dbflow-sqlcipher")
    compile project("${dbflow_project_prefix}dbflow-kotlinextensions")
    compile project("${dbflow_project_prefix}dbflow-rx")
    compile project("${dbflow_project_prefix}dbflow-rx-kotlinextensions")
    compile project("${dbflow_project_prefix}dbflow-rx2")
    compile project("${dbflow_project_prefix}dbflow-rx2-kotlinextensions")

    kaptTest project("${dbflow_project_prefix}dbflow-processor")
    kaptAndroidTest project("${dbflow_project_prefix}dbflow-processor")

    testCompile 'org.glassfish:javax.annotation:10.0-b28'

    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.3.2"
    testCompile("com.nhaarman:mockito-kotlin:1.5.0") {
        exclude group: "org.jetbrains.kotlin"
    }
    testCompile 'org.mockito:mockito-core:2.8.9'

    androidTestCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test:runner:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile('com.android.support.test:rules:0.5') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'org.awaitility:awaitility:3.0.0-rc1'

}

android.applicationVariants.all { variant ->
    String taskName = "copy${variant.name.capitalize()}ResDirectoryToClasses"
    task(taskName, type: Copy) {
        from "${projectDir}/src/test/res"
        into "${buildDir}/intermediates/classes/test/${variant.buildType.name}/res"

        from "${projectDir}/src/test/assets"
        into "${buildDir}/intermediates/classes/test/${variant.buildType.name}/assets"
    }
    project.getTasksByName("generate${variant.name.capitalize()}Resources", false)[0].dependsOn(taskName)
}

kapt {
    generateStubs = true
}

dexcount {
    includeClasses = true
    orderByMethodCount = true
}